{"version":3,"sources":["webpack:///./docs/pages/auto-init.md"],"names":["_path","_interopRequireDefault","__webpack_require__","_react","_interopRequireWildcard","Link","props","to","rest","_objectWithoutProperties","includes","default","createElement","_extends","href","path","join","onClick","e","preventDefault","location","URL","window","origin","history","pushState","Location","pathname","hash","query","getLocation","popStateEvent","CustomEvent","detail","dispatchEvent","defaultProps","lazyComponent","provider","_class","_temp","React","Component","[object Object]","args","super","_defineProperty","this","Comp","componentDidMount","state","shouldLoad","then","c","setState","render","children","bind","_jsx","className","_ref3","_ref4","currentPage","id","_ref5","aria-hidden","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11"],"mappings":"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","file":"auto-init.js","sourcesContent":["\n      \n      import path from 'path';\n      import React, { Component } from 'react';\n      import makeClass from 'classnames';\n\n      \n  import PropTypes from 'prop-types';\n\n  const getLocation = Location => ({\n    href: Location.href,\n    pathname: Location.pathname,\n    hash: Location.hash,\n    query: Location.query\n  });\n\n  const Link = props => {\n    let {to, ...rest} = props;\n\n    if (to.includes('http')) {\n      return <a {...props} href={to} />\n    }\n\n    if (to[0] === '#') {\n      to = path.join('/auto/','pages/auto-init.html') + to;\n    }\n\n    return (\n      <a\n        {...rest}\n        href={to}\n        onClick={e => {\n          e.preventDefault();\n\n          if (props.to === '#') {\n            return false;\n          }\n\n          const location = new URL(path.join(window.location.origin, to))\n\n          window.history.pushState(getLocation(location), null, to);\n          props.onClick();\n\n          const popStateEvent = new CustomEvent('changeLocation', { detail: location });\n          dispatchEvent(popStateEvent);\n\n          return false;\n        }}\n      />\n    );\n  };\n\n  Link.defaultProps = {\n    href: '',\n    onClick: () => {}\n  };\n\n  Link.propTypes = {\n    href: PropTypes.string,\n    onClick: PropTypes.func\n  }\n\n      \n  const PluginProvider = ({plugins, name, options, children, ...props}) => {\n    let Plugin = plugins[name];\n    const pluginOptions = Plugin.options;\n\n    if (!Plugin) {\n      return <div />;\n    }\n\n    Plugin = Plugin.component;\n    return (\n      <Plugin\n        {...pluginOptions} \n        options={options ? options.options : {}}\n        {...(options ? options.props : props)}\n        children={children}\n        plugins={plugins}\n      />\n    );\n  };\n\n      \n  class Details extends Component {\n    state = {\n      open: this.props.open\n    }\n\n    render() {\n      return (\n        <details open={this.state.open}>\n          {this.props.children}\n        </details>\n      )\n    }\n  };\n\n      \n      \n    import IdealImage from 'react-ideal-image';\n\n    const imageSources = {  };\n\n    class LazyImageComponent extends React.Component {\n      state = {\n        image: null,\n        ImageProvider: imageSources[this.props.src]\n      }\n\n      componentDidMount() {\n        if (!this.state.image) {\n          this.state.ImageProvider().then(c => {\n            this.setState({\n              image: c.default\n            });\n          });\n        }\n      }\n\n      render() {\n        let { image } = this.state;\n\n        return image && typeof image === 'object' ? (\n          <IdealImage\n            {...this.props}\n            className={makeClass('image', this.props.className)}\n            src={image.src.src}\n            width={image.src.width || image.width}\n            height={image.src.height || image.height}\n            placeholder={{ lqip: image.preSrc }}\n            srcSet={image.src.images\n              ? image.src.images.map(i => ({\n                  ...i,\n                  src: i.path\n                }))\n              : [{\n                  src: image.src,\n                  width: image.width\n                }]\n            }\n          />\n        ) : <img className={makeClass('image', this.props.className)} src={image} />;\n      }\n    }\n  \n      \n  const lazyComponent = provider =>\n    class extends React.Component {\n      static defaultProps = {\n        shouldLoad: true\n      };\n  \n      state = {\n        Comp: null\n      };\n  \n      componentDidMount() {\n        if (!this.state.Comp && this.props.shouldLoad) {\n          provider().then(c => {\n            this.setState({\n              Comp: c.default\n            });\n          });\n        }\n      }\n  \n      render() {\n        const { Comp } = this.state;\n        return Comp ? React.createElement(Comp, this.props, this.props.children || null) : null;\n      }\n    };\n\n\n      const Gist = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-gist'))\n      const TweetEmbed = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-tweet-embed'))\n    \n      \n    const markDownPage = props => (\n      <div className={props.className}>\n        <section>\n          <h1>Initialization</h1>\n<p><code>auto</code> provides some tools to quickly set up your project. If you do not want to use the interactive experience all these options can be configured via the <Link currentPage={(this && this.props || props).currentPage} to=\"/auto/pages/autorc.html\">.autorc</Link> and most can be configure via CLI options.</p>\n<h2 id=\"auto-init\"><code>auto init</code> <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#auto-init\" aria-hidden=\"true\"></Link></h2>\n<p>Interactive setup for most configurable options.</p>\n<pre><code className=\"language-sh\">$ auto init --<span className=\"hljs-built_in\">help</span><br /><br />Options<br /><br />  --only-labels    Only run init <span className=\"hljs-keyword\">for</span> the labels. As most other options are <span className=\"hljs-keyword\">for</span> advanced users<br />  -d, --dry-run    Report what <span className=\"hljs-built_in\">command</span> will <span className=\"hljs-keyword\">do</span> but <span className=\"hljs-keyword\">do</span> not actually <span className=\"hljs-keyword\">do</span> anything<br /><br />Examples<br /><br />  $ auto init<br /></code></pre>\n<h2 id=\"auto-create-labels\"><code>auto create-labels</code> <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#auto-create-labels\" aria-hidden=\"true\"></Link></h2>\n<p>Create your project's labels on github.</p>\n<pre><code className=\"language-sh\">$ auto create-labels --<span className=\"hljs-built_in\">help</span><br /><br />Options<br /><br />  -d, --dry-run    Report what <span className=\"hljs-built_in\">command</span> will <span className=\"hljs-keyword\">do</span> but <span className=\"hljs-keyword\">do</span> not actually <span className=\"hljs-keyword\">do</span> anything<br /><br />Global Options<br /><br />  -h, --<span className=\"hljs-built_in\">help</span>            Display the <span className=\"hljs-built_in\">help</span> output <span className=\"hljs-keyword\">for</span> the <span className=\"hljs-built_in\">command</span><br />  -v, --verbose         Show some more logs<br />  -w, --very-verbose    Show a lot more logs<br />  --repo string         The repo to <span className=\"hljs-built_in\">set</span> the status on. Defaults to looking <span className=\"hljs-keyword\">in</span> the package.json<br />  --owner string        The owner of the GitHub repo. Defaults to reading from the package.json<br />  --github-api string   GitHub API to use<br />  --plugins string[]    Plugins to load auto with. (defaults to just npm)<br /><br />Examples<br /><br />  $ auto create-labels<br /></code></pre>\n\n        <article className=\"message column is-warning\">\n          \n          <div className=\"message-body\">\n      <p>⚠️ For this to work you must have a <code>GH_TOKEN</code> set, ex: <code>GH_TOKEN=YOUR_TOKEN auto create-labels</code></p>\n\n        </div>\n      </article>\n    \n        </section>\n      </div>\n    );\n\n    export default markDownPage;\n  \n    "],"sourceRoot":""}